(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[432],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),g=o,m=d["".concat(u,".").concat(g)]||d[g]||p[g]||i;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1473:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return u},default:function(){return l}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a={id:"testing",title:"Testing your rules",sidebar_label:"Testing your rules",slug:"/testing-your-rules"},s={unversionedId:"testing",id:"testing",isDocsHomePage:!1,title:"Testing your rules",description:"Testing your rules is straightforward.",source:"@site/docs/testing.md",sourceDirName:".",slug:"/testing-your-rules",permalink:"/blitz-guard/docs/testing-your-rules",editUrl:"https://github.com/ntgussoni/blitz-guard/edit/main/docs/docs/testing.md",version:"current",sidebar_label:"Testing your rules",frontMatter:{id:"testing",title:"Testing your rules",sidebar_label:"Testing your rules",slug:"/testing-your-rules"},sidebar:"someSidebar",previous:{title:"Developer middleware",permalink:"/blitz-guard/docs/middleware"},next:{title:"How to contribute",permalink:"/blitz-guard/docs/contributing"}},u=[{value:"Testing your business logic",id:"testing-your-business-logic",children:[]},{value:"Testing your endpoints",id:"testing-your-endpoints",children:[]}],c={toc:u};function l(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Testing your rules is straightforward.\nSimply import your Guard instance from the ability file and use ",(0,i.kt)("inlineCode",{parentName:"p"},"Guard.can")," to test the rules against different conditions."),(0,i.kt)("h2",{id:"testing-your-business-logic"},"Testing your business logic"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// app/guard/ability\nconst Guard = GuardBuilder(\n  async (ctx, { can, cannot }) => {\n    cannot("manage", "comment")\n    cannot("manage", "article")\n\n    can("read", "article")\n    can("read", "comment")\n\n    if (ctx.session.isAuthorized()) {\n      can("create", "article")\n      can("create", "comment")\n      can("send email", "comment")\n\n      can("delete", "comment", async (_args) => {\n        return (await db.comment.count({ where: { userId: ctx.session.userId } })) === 1\n      })\n    }\n  },\n)\n...\n\n// test\n\nexpect(Guard.can("read","article", {}, {}).can).toBe(true)\n')),(0,i.kt)("h2",{id:"testing-your-endpoints"},"Testing your endpoints"),(0,i.kt)("p",null,"Guard.authorize will raise an ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthorizationError")," exception if the user is not authorized, this is what you have to look for when testing your endpoints."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'...\ntry {\n  await createMessage(\n    {\n      data: {\n       ...\n      },\n    },\n    ctx,\n  )\n  fail("This call should throw an exception")\n} catch (e) {\n  let error = e as AuthorizationError\n  expect(error.statusCode).toEqual(403)\n  expect(error.name).toEqual("AuthorizationError")\n  // expect(error.message).toEqual("Some reason")\n}\n...\n')))}l.isMDXComponent=!0}}]);